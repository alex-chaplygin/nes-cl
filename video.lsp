(defparameter *screen-width* 256)
(defparameter *screen-height* 240)
(defparameter *size* (* *screen-width* *screen-height*))

(defpackage :video
  (:use :cl)
  (:export :set-palette-mask))

(in-package :video)

(defun init-lib ()
  (cffi:define-foreign-library video
    (t (:default "/tmp/video")))
  (cffi:use-foreign-library video)
  (cffi:defcfun "video_init" :void (scale :int))
  (cffi:defcfun "video_update" :void (buf :pointer))
  (cffi:defcfun "video_close" :void)
  (cffi:defcfun "video_get_events" :int)
  (cffi:defcfun "set_palette_mask" :void (r :int) (g :int) (b :int))
  (cffi:defcfun "video_sleep" :int (del :long)))

(defun setup-tiles ()
  (mem:rd #x2002)
  (mem:wrt #x2006 0)
  (mem:wrt #x2006 0)
  (let ((ar #(#x41 #xc2 #x44 #x48 #x10 #x20 #x40 #x80 1 2 4 8 #x16 #x21 #x42 #x87)))
    (dotimes (i 16)
      (mem:wrt #x2007 (svref ar i)))))

(defun setup-palette ()
  (mem:rd #x2002)
  (mem:wrt #x2006 (ash ppu:+palette+ -8))
  (mem:wrt #x2006 (logand ppu:+palette+ #xFF))  
  (let ((pal #(#x10 #x12 #x16 #x1A #x2B #x15 #x18 #x1c #x3C #x33 #x27 #x2c #x2 #x35 #x38 #x3e)))
    (dotimes (i 16)
      (mem:wrt #x2007 (svref pal i)))))

(defun setup-names ()
  (mem:rd #x2002)
  (mem:wrt #x2006 (ash ppu:+name0+ -8))
  (mem:wrt #x2006 (logand ppu:+name0+ #xFF))  
  (dotimes (y 30)
    (dotimes (x 32)
      (mem:wrt #x2007 (logand x 1))))
  (dotimes (i 64)
    (mem:wrt #x2007 i)))

(defun setup-ppu ()
  (mem:wrt #x2000 #x80)
  (mem:wrt #x2001 #xFE))

(defun main ()
  (video-init 2)
  (setf q 1)
  (loop while (= q 1)
	do (setf q (video-get-events))
	   (let ((fr (ppu:get-frame)))
	     (cffi:with-foreign-object (buf :unsigned-char (* 256 240))
	       (dotimes (i *size*)
		 (setf (cffi:mem-aref buf :unsigned-char i) (svref fr i)))
	       (video-update buf)))
	   (video-sleep 120))
  (video-close))

(defun close-lib ()
  (cffi:close-foreign-library 'video))

(init-lib)
(setup-tiles)
(setup-palette)
(setup-names)
(setup-ppu)
(main)
(ppu:get-frame)
(video-close)
(close-lib)
