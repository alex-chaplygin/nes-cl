(defmacro make (name cod cyc &body body)
  `(defun ,name (ac op res)
     (setf PC 0)
     (setf A ac)
     (mem:wrt PC ,cod)
     ,@body
     (assert (= (one-cmd) ,cyc))
     (assert (= A res))))

(make adc-imm #x69 2 (mem:wrt (+ PC 1) op))
(make adc-zero #x65 3 (mem:wrt (+ PC 1) #x10) (mem:wrt #x10 op))
(make adc-zerox #x75 4 (setf X #xFF) (mem:wrt (+ PC 1) #x5)
      (mem:wrt #x4 op))
(make adc-abs #x6D 4 (mem:wrt (+ PC 1) #x5) (mem:wrt (+ PC 2) #x2)
      (mem:wrt #x205 op))
(make adc-absx1 #x7D 4 (mem:wrt (+ PC 1) #x5) (mem:wrt (+ PC 2) #x2)
      (setf X 3) (mem:wrt #x208 op))
(make adc-absx2 #x7D 5 (mem:wrt (+ PC 1) #xff) (mem:wrt (+ PC 2) #x2)
      (setf X 2) (mem:wrt #x301 op))
(make adc-absy #x79 5 (mem:wrt (+ PC 1) #xff) (mem:wrt (+ PC 2) #x2)
      (setf Y 2) (mem:wrt #x301 op))
(make adc-xind #x61 6 (mem:wrt (+ PC 1) #x40) (mem:wrt #x42 #x2)
      (mem:wrt #x43 #x2) (setf X 2) (mem:wrt #x202 op))
(make adc-indy1 #x71 5 (mem:wrt (+ PC 1) #x40) (mem:wrt #x40 #x2)
      (mem:wrt #x41 #x2) (setf Y 2) (mem:wrt #x204 op))
(make adc-indy2 #x71 6 (mem:wrt (+ PC 1) #x40) (mem:wrt #x40 #x2)
      (mem:wrt #x41 #x2) (setf Y #xFF) (mem:wrt #x301 op))

(defun adc-test (func)
  (|clear-carry|)
  (funcall func 0 10 10)
  (assert (= (|get-zero|) 0))
  (assert (= (|get-over|) 0))
  (funcall func 1 255 0)
  (assert (= (|get-zero|) 1))
  (funcall func 1 #xF0 #xF2)
  (assert (= (|get-neg|) 1))
  (assert (= (|get-carry|) 0))
  (funcall func 255 2 1)
  (assert (= (|get-carry|) 1))
  (funcall func 255 1 1)
  (assert (= (|get-over|) 1))
  (|clear-carry|)
  (funcall func 1 254 255)
  (funcall func 255 255 254)
  (|clear-carry|)
  (funcall func 0 0 0))

(adc-test #'adc-imm)
(adc-test #'adc-zero)
(adc-test #'adc-zerox)
(adc-test #'adc-abs)
(adc-test #'adc-absx1)
(adc-test #'adc-absx2)
(adc-test #'adc-absy)
(adc-test #'adc-xind)
(adc-test #'adc-indy1)
(adc-test #'adc-indy2)
